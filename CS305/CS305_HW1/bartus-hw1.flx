%%

\n yylineno++;
[ \n\r\t] {}
, printf("%d tCOMMA \n", yylineno);
["][\+]["] printf("%d tPLUS \n", yylineno);
["][\*]["] printf("%d tMUL \n", yylineno);
["][\+][\+]["] printf("%d tINC \n", yylineno);
\[ printf("%d tLBRAC \n", yylineno);
\] printf("%d tRBRAC \n", yylineno);
["][>]["] printf("%d tGT \n", yylineno);
["][>][=]["] printf("%d tGEQ \n", yylineno);
["][=][=]["] printf("%d tEQUALITY \n", yylineno);
["][-]["] printf("%d tMINUS \n", yylineno);
["][\/]["] printf("%d tDIV \n", yylineno);
["][-][-]["] printf("%d tDEC \n", yylineno);
["][<]["] printf("%d tLT \n", yylineno);
["][<][=]["] printf("%d tLEQ \n", yylineno);
\"Set\" printf("%d tSET \n", yylineno);
\"Get\" printf("%d tGET \n", yylineno);
\"Function\" printf("%d tFUNCTION \n", yylineno);
\"Print\" printf("%d tPRINT \n", yylineno);
\"For\" printf("%d tFOR \n", yylineno);
\"If\" printf("%d tIF \n", yylineno);
\"Return\" printf("%d tRETURN \n", yylineno);
\"[a-zA-Z_][a-zA-Z0-9_]*\" {

    char* str = (char*) malloc(strlen(yytext) + 1); 
    char* substr = (char*) malloc(strlen(yytext) - 1);
    strcpy(str, yytext);
    strncpy(substr, str+1, strlen(str) - 2);
    substr[strlen(str) - 2] = '\0';

    printf("%d tIDENT (%s)\n", yylineno, substr);

    free(str);
    free(substr);
}
-?[0-9]+(\.[0-9]+)? {
    char* str = (char*) malloc(strlen(yytext) + 1);
    strcpy(str, yytext);

    int decimal = 0;
    int i;
    for(i = 0; i < strlen(str); i++)
    {
        if(str[i] == '.')
        {
            decimal = 1;
            break;
        }
    }

    float value = atof(str);
    if(decimal == 1)
    {
        int integer = value;
        if(value - integer == 0)
        {
            printf("%d tNUM (%s) (%.1f)\n", yylineno, str, value);
        }
        else
        {
            printf("%d tNUM (%s) (%g)\n", yylineno, str, value);
        }
    }
    else
    {
        printf("%d tNUM (%s) (%g)\n", yylineno, str, value);
    }

    free(str);
}

\'[^\']*\' {
    char* str = (char*) malloc(strlen(yytext) + 1); 
    char* substr = (char*) malloc(strlen(yytext) - 1);
    strcpy(str, yytext);
    strncpy(substr, str+1, strlen(str) - 2);
    substr[strlen(str) - 2] = '\0';

    printf("%d tSTRING (%s)\n", yylineno, substr);

    free(str);
    free(substr);

    int count = 0;
    int i;
    for (i = 0; i < yyleng; i++) 
    {
        if (yytext[i] == '\n') 
        {
            count++;
        }
    }
    yylineno += count;
}
. printf("%d ILLEGAL CHARACTER (%c)\n", yylineno, yytext[0]);

%%

int main()
{ 
    yylex();
    return 0;
}

